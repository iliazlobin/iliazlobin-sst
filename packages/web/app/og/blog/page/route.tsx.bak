import { ImageResponse } from 'next/og'
import { NextRequest } from 'next/server'

import { allPosts } from '@/.contentlayer/generated'

export const runtime = 'edge'

// export const contentType = 'image/png'

// https://vercel.com/docs/functions/og-image-generation/og-image-examples
// export async function GET(request: NextRequest, context: { params: Params }) {
export async function GET(request: NextRequest) {
  try {
    const url = new URL(request.url)
    const slug = url.searchParams.get('slug')

    const post = allPosts.find(post => post.slug === slug)

    if (!post) {
      return null
    }

    return new ImageResponse(
      (
        <div
          style={{
            backgroundColor: 'black',
            backgroundSize: '150px 150px',
            height: '100%',
            width: '100%',
            display: 'flex',
            textAlign: 'center',
            alignItems: 'center',
            justifyContent: 'center',
            flexDirection: 'column',
            flexWrap: 'nowrap',
          }}
        >
          <div
            style={{
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              justifyItems: 'center',
            }}
          >
            <img
              alt="Cover"
              height={350}
              src={`http://localhost:3010/${post.coverImage.path}`}
              style={{ margin: '0 3px', objectFit: 'cover' }}
              width={1100}
            />
          </div>
          <div
            style={{
              fontSize: 60,
              fontStyle: 'normal',
              letterSpacing: '-0.025em',
              color: 'white',
              marginTop: 30,
              padding: '0 120px',
              lineHeight: 1.4,
              whiteSpace: 'pre-wrap',
            }}
          >
            {post.title}
          </div>
        </div>
      ),
      {
        width: 1200,
        height: 630,
        // debug: true,
      },
    )
  } catch (e: any) {
    console.log(`${e.message}`)
    return new Response(`Failed to generate the image`, {
      status: 500,
    })
  }
}
