import type { Metadata } from 'next'
import Image from 'next/image'
import { notFound } from 'next/navigation'

import Tag from '@/components/Tag'
import { Mdx } from '@/components/mdx-components-blog'
import { DashboardTableOfContents } from '@/components/toc'
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { siteConfig } from '@/config/site'
import { TableOfContents, getTableOfContents } from '@/lib/toc'
import '@/styles/mdx.css'

import { Post, allPosts } from 'contentlayer/generated'
import { useEffect, useState } from "react"
import { toc } from "mdast-util-toc"

interface BlogPageProps {
  params: {
    slug: string[]
  }
}

async function getPostFromParams({ params }: BlogPageProps) {
  const slug = params.slug?.join('/') || ''
  const post = allPosts.find(post => post.slugAsParams === slug)

  if (!post) {
    return null
  }

  return post
}

export async function generateMetadata({
  params
}: BlogPageProps): Promise<Metadata> {
  const blog = await getPostFromParams({ params })

  if (!blog) {
    return {}
  }

  return {
    title: blog.title,
    description: blog.summary,
    openGraph: {
      title: blog.title,
      description: blog.summary,
      type: 'article',
      url: siteConfig.url + blog.slug,
      images: [
        {
          url: siteConfig.ogImage,
          width: 1200,
          height: 630,
          alt: siteConfig.name
        }
      ]
    },
    twitter: {
      card: 'summary_large_image',
      title: blog.title,
      description: blog.summary,
      images: [siteConfig.ogImage],
      creator: '@shadcn'
    }
  }
}

export async function generateStaticParams(): Promise<
  BlogPageProps['params'][]
> {
  return allPosts.map(post => ({
    slug: post.slugAsParams.split('/')
  }))
}

const postDateTemplate: Intl.DateTimeFormatOptions = {
  weekday: 'long',
  year: 'numeric',
  month: 'long',
  day: 'numeric'
}

export default function DocPage({ params }: BlogPageProps) {
  const [post, setPost] = useState<Post>()
  const [tags, setTags] = useState<string[]>([])
  const [toc, setToc] = useState<TableOfContents | null>(null)

  useEffect(() => {
    const run = async () => {
      const p = await getPostFromParams({ params })

      if (!p) {
        notFound()
      }

      setPost(p)
      setTags(p.tags)
      const t = await getTableOfContents(p.body.raw)
      setToc(t)
    }
    run().catch(console.error)
  })

  return (
    <main className="container grid lg:grid-cols-[320px_auto] xl:grid-cols-[320px_auto_280px] gap-4 p-0">
      <div className="hidden lg:block shrink-0 p-4">
        <div className="sticky top-20 ">
          <Card className="mb-4">
            <CardHeader>
              <CardTitle>Authors</CardTitle>
            </CardHeader>
            <CardContent className="grid gap-6">
              <div className="flex items-center justify-between space-x-4">
                <Button
                  variant="ghost"
                  className="w-full justify-start text-left"
                >
                  <div className="flex items-center space-x-4">
                    <Avatar className="h-8 w-8">
                      <AvatarImage src="/avatars/02.png" alt="Image" />
                      <AvatarFallback>IZ</AvatarFallback>
                    </Avatar>
                    <div>
                      <p className="text-sm font-medium leading-none">
                        Ilia Zlobin
                      </p>
                      <p className="text-sm text-muted-foreground">
                        Cloud Architect
                      </p>
                    </div>
                  </div>
                </Button>
              </div>
            </CardContent>
          </Card>
          <Card className="mb-4">
            <CardHeader>
              <CardTitle>Tags</CardTitle>
            </CardHeader>
            <CardContent>
              {tags.map(tag => (
                <div key={tag}>
                  <Tag text={tag} />
                </div>
              ))}
            </CardContent>
          </Card>
        </div>
      </div>
      <div className="mx-auto lg:mx-0 w-full min-w-0 max-w-3xl p-4">
        <h1 className={'text-6xl font-bold text-center'}>{post.title}</h1>
        {post.date && (
          <div className="text-base font-medium leading-6 text-gray-500 dark:text-gray-400 text-center mb-4">
            <time dateTime={post.date}>
              {new Date(post.date).toLocaleDateString(
                'en-US',
                postDateTemplate
              )}
            </time>
          </div>
        )}
        <div className="flex justify-center mb-4">
          <Image
            src={post.coverImage.path}
            alt={post.title}
            width={post.coverImage.height}
            height={post.coverImage.width}
          />
        </div>

        <Mdx code={post.body.code} />
      </div>
      <div className="hidden xl:block shrink-0 p-4">
        <div className="sticky top-20 text-sm">
          <Card className="mb-4">
            <CardHeader>
              <CardTitle className="text-xl">Table of Content</CardTitle>
            </CardHeader>
            <CardContent className="grid">
              <Button
                onClick={() => window.scrollTo({ top: 0, behavior: 'smooth' })}
              >
                Scroll Up
              </Button>
              <DashboardTableOfContents toc={toc} />
            </CardContent>
          </Card>
        </div>
      </div>
    </main>
  )
}
